<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/dashboard-frontend/src/App.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/dashboard-frontend/src/App.css" />
              <option name="originalContent" value="/* src/App.css */&#10;@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;/* Define the blinking animation */&#10;@keyframes blink-highlight {&#10;  0% {&#10;    background-color: #d1fae5; /* Light green */&#10;  }&#10;  50% {&#10;    background-color: transparent; /* Transparent */&#10;  }&#10;  100% {&#10;    background-color: #d1fae5; /* Light green */&#10;  }&#10;}&#10;&#10;/* Apply the animation to highlighted rows */&#10;.highlight-row {&#10;  animation: blink-highlight 1s ease-in-out 2; /* Blink 2 times */&#10;}&#10;&#10;/* Apply the animation to highlighted cards (for grid view) */&#10;.highlight-card {&#10;  animation: blink-highlight 1s ease-in-out 2; /* Blink 2 times */&#10;  border-color: #34d399; /* Green border */&#10;  box-shadow: 0 0 15px rgba(52, 211, 153, 0.5); /* Green glow */&#10;}&#10;&#10;/* Basic font for the entire app */&#10;body {&#10;  font-family: 'Inter', sans-serif; /* Using Inter as per instructions, ensure it's loaded or use a fallback */&#10;}&#10;" />
              <option name="updatedContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;@keyframes blink-highlight {&#10;  0% {&#10;    background-color: #d1fae5;&#10;  }&#10;  50% {&#10;    background-color: transparent;&#10;  }&#10;  100% {&#10;    background-color: #d1fae5;&#10;  }&#10;}&#10;.highlight-row {&#10;  animation: blink-highlight 1s ease-in-out 2;&#10;}&#10;.highlight-card {&#10;  animation: blink-highlight 1s ease-in-out 2;&#10;  border-color: #34d399;&#10;  box-shadow: 0 0 15px rgba(52, 211, 153, 0.5);&#10;}&#10;body {&#10;  font-family: 'Inter', sans-serif;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/dashboard-frontend/src/App.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/dashboard-frontend/src/App.js" />
              <option name="originalContent" value="// src/App.js&#10;import React, { useState, useEffect, useRef } from &quot;react&quot;;&#10;import axios from &quot;axios&quot;;&#10;import io from &quot;socket.io-client&quot;;&#10;import &quot;./App.css&quot;; // For custom styles including highlight effect&#10;&#10;// Import table components&#10;import UserTable from &quot;./components/tables/UserTable&quot;;&#10;import ProductTable from &quot;./components/tables/ProductTable&quot;;&#10;import OrderTable from &quot;./components/tables/OrderTable&quot;;&#10;import TransactionTable from &quot;./components/tables/TransactionTable&quot;;&#10;import SupportTicketTable from &quot;./components/tables/SupportTicketTable&quot;;&#10;&#10;// Import grid component&#10;import ProductGrid from &quot;./components/ProductGrid&quot;;&#10;&#10;// Base URL for your backend REST APIs&#10;const API_BASE_URL = &quot;http://localhost:3001/api&quot;;&#10;// URL for your Socket.IO server&#10;const SOCKET_URL = &quot;http://localhost:3001&quot;;&#10;&#10;function App() {&#10;  // State to hold data for each table&#10;  const [users, setUsers] = useState([]);&#10;  const [products, setProducts] = useState([]);&#10;  const [orders, setOrders] = useState([]);&#10;  const [transactions, setTransactions] = useState([]);&#10;  const [supportTickets, setSupportTickets] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;&#10;  // State for highlighting updated rows/cards - now an array!&#10;  const [highlightedRows, setHighlightedRows] = useState([]); // Changed to an array&#10;&#10;  // State to toggle between table and grid view for products&#10;  const [productViewMode, setProductViewMode] = useState(&quot;table&quot;); // 'table' or 'grid'&#10;&#10;  // Refs to store previous data for comparison&#10;  const prevUsersRef = useRef([]);&#10;  const prevProductsRef = useRef([]);&#10;  const prevOrdersRef = useRef([]);&#10;  const prevTransactionsRef = useRef([]);&#10;  const prevSupportTicketsRef = useRef([]);&#10;&#10;  // Effect for initial data fetch and Socket.IO connection&#10;  useEffect(() =&gt; {&#10;    const fetchInitialData = async () =&gt; {&#10;      try {&#10;        const [&#10;          usersRes,&#10;          productsRes,&#10;          ordersRes,&#10;          transactionsRes,&#10;          supportTicketsRes,&#10;        ] = await Promise.all([&#10;          axios.get(`${API_BASE_URL}/users`),&#10;          axios.get(`${API_BASE_URL}/products`),&#10;          axios.get(`${API_BASE_URL}/orders`),&#10;          axios.get(`${API_BASE_URL}/transactions`),&#10;          axios.get(`${API_BASE_URL}/support-tickets`),&#10;        ]);&#10;&#10;        setUsers(usersRes.data);&#10;        setProducts(productsRes.data);&#10;        setOrders(ordersRes.data);&#10;        setTransactions(transactionsRes.data);&#10;        setSupportTickets(supportTicketsRes.data);&#10;&#10;        // Store initial data in refs for future comparisons&#10;        prevUsersRef.current = usersRes.data;&#10;        prevProductsRef.current = productsRes.data;&#10;        prevOrdersRef.current = ordersRes.data;&#10;        prevTransactionsRef.current = transactionsRes.data;&#10;        prevSupportTicketsRef.current = supportTicketsRes.data;&#10;&#10;        setLoading(false);&#10;      } catch (err) {&#10;        console.error(&quot;Error fetching initial data:&quot;, err);&#10;        setError(&quot;Failed to load initial data.&quot;);&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    fetchInitialData();&#10;&#10;    const socket = io(SOCKET_URL);&#10;&#10;    socket.on(&quot;connect&quot;, () =&gt; {&#10;      console.log(&quot;Connected to Socket.IO server!&quot;);&#10;    });&#10;&#10;    socket.on(&quot;dashboardUpdate&quot;, (data) =&gt; {&#10;      console.log(&quot;Received real-time update:&quot;, data);&#10;&#10;      // Function to find updated row, sort data to bring it to top, and set highlight&#10;      const findAndUpdateAndHighlight = (&#10;        newData,&#10;        currentDataRef,&#10;        setStateFn,&#10;        type,&#10;      ) =&gt; {&#10;        let updatedId = null;&#10;        let foundNewEntry = false;&#10;&#10;        const currentDataMap = new Map(&#10;          currentDataRef.current.map((item) =&gt; [item.id, item]),&#10;        );&#10;        let updatedDataSorted = [...newData]; // Create a mutable copy for sorting&#10;&#10;        // First, find the updated/new item and mark it for highlight&#10;        for (const newItem of newData) {&#10;          const oldItem = currentDataMap.get(newItem.id);&#10;&#10;          if (!oldItem) {&#10;            // New entry added&#10;            updatedId = newItem.id;&#10;            foundNewEntry = true;&#10;            break; // Found a new entry, prioritize highlighting it&#10;          }&#10;&#10;          // Simple deep comparison for updates&#10;          if (JSON.stringify(newItem) !== JSON.stringify(oldItem)) {&#10;            updatedId = newItem.id;&#10;            break; // Found an updated entry&#10;          }&#10;        }&#10;&#10;        // If an item was updated or added, move it to the top&#10;        if (updatedId !== null) {&#10;          const itemToMove = updatedDataSorted.find(&#10;            (item) =&gt; item.id === updatedId,&#10;          );&#10;          if (itemToMove) {&#10;            updatedDataSorted = updatedDataSorted.filter(&#10;              (item) =&gt; item.id !== updatedId,&#10;            );&#10;            updatedDataSorted.unshift(itemToMove); // Move to the beginning of the array&#10;          }&#10;        }&#10;&#10;        // Handle removals (optional, just logging as before)&#10;        if (!updatedId &amp;&amp; newData.length &lt; currentDataRef.current.length) {&#10;          const newDataMap = new Map(newData.map((item) =&gt; [item.id, item]));&#10;          for (const oldItem of currentDataRef.current) {&#10;            if (!newDataMap.has(oldItem.id)) {&#10;              console.log(`Item ${oldItem.id} of type ${type} was removed.`);&#10;              // For simplicity, we won't highlight removals with a blink,&#10;              // but you could highlight a 'ghost' element or a message.&#10;              break;&#10;            }&#10;          }&#10;        }&#10;&#10;        setStateFn(updatedDataSorted); // Update the state with the sorted data&#10;        currentDataRef.current = updatedDataSorted; // Update the ref with the sorted data&#10;&#10;        if (updatedId !== null) {&#10;          // Add the new highlighted row to the array&#10;          setHighlightedRows((prev) =&gt; [&#10;            ...prev,&#10;            { id: updatedId, type: type },&#10;          ]);&#10;          // Remove highlight after a short delay&#10;          setTimeout(() =&gt; {&#10;            setHighlightedRows((prev) =&gt;&#10;              prev.filter(&#10;                (row) =&gt; !(row.id === updatedId &amp;&amp; row.type === type),&#10;              ),&#10;            );&#10;          }, 1000); // Highlight for 1 second&#10;        }&#10;      };&#10;&#10;      // Apply updates and highlight for each data type&#10;      if (data.users)&#10;        findAndUpdateAndHighlight(data.users, prevUsersRef, setUsers, &quot;users&quot;);&#10;      if (data.products)&#10;        findAndUpdateAndHighlight(&#10;          data.products,&#10;          prevProductsRef,&#10;          setProducts,&#10;          &quot;products&quot;,&#10;        );&#10;      if (data.orders)&#10;        findAndUpdateAndHighlight(&#10;          data.orders,&#10;          prevOrdersRef,&#10;          setOrders,&#10;          &quot;orders&quot;,&#10;        );&#10;      if (data.transactions)&#10;        findAndUpdateAndHighlight(&#10;          data.transactions,&#10;          prevTransactionsRef,&#10;          setTransactions,&#10;          &quot;transactions&quot;,&#10;        );&#10;      if (data.supportTickets)&#10;        findAndUpdateAndHighlight(&#10;          data.supportTickets,&#10;          prevSupportTicketsRef,&#10;          setSupportTickets,&#10;          &quot;supportTickets&quot;,&#10;        );&#10;    });&#10;&#10;    socket.on(&quot;disconnect&quot;, () =&gt; {&#10;      console.log(&quot;Disconnected from Socket.IO server.&quot;);&#10;    });&#10;&#10;    socket.on(&quot;connect_error&quot;, (err) =&gt; {&#10;      console.error(&quot;Socket.IO connection error:&quot;, err);&#10;      setError(&quot;Socket.IO connection failed.&quot;);&#10;    });&#10;&#10;    return () =&gt; {&#10;      socket.disconnect();&#10;    };&#10;  }, []);&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen text-lg&quot;&gt;&#10;        Loading dashboard data...&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen text-lg text-red-500&quot;&gt;&#10;        Error: {error}&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Helper function to check if a row is currently highlighted&#10;  const isRowHighlighted = (rowId, rowType) =&gt; {&#10;    return highlightedRows.some((hr) =&gt; hr.id === rowId &amp;&amp; hr.type === rowType);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-100 p-4 font-sans&quot;&gt;&#10;      &lt;h1 className=&quot;text-4xl font-extrabold text-center mb-10 text-gray-900 drop-shadow-lg&quot;&gt;&#10;        Real-Time Dashboard &#10;      &lt;/h1&gt;&#10;&#10;      {/* Product View Toggle */}&#10;      &lt;div className=&quot;flex justify-center mb-8&quot;&gt;&#10;        &lt;button&#10;          onClick={() =&gt; setProductViewMode(&quot;table&quot;)}&#10;          className={`&#10;            px-6 py-2 rounded-l-lg text-lg font-medium transition-all duration-300 ease-in-out&#10;            ${productViewMode === &quot;table&quot; ? &quot;bg-blue-600 text-white shadow-lg&quot; : &quot;bg-gray-200 text-gray-700 hover:bg-gray-300&quot;}&#10;          `}&#10;        &gt;&#10;          Product Table View&#10;        &lt;/button&gt;&#10;        &lt;button&#10;          onClick={() =&gt; setProductViewMode(&quot;grid&quot;)}&#10;          className={`&#10;            px-6 py-2 rounded-r-lg text-lg font-medium transition-all duration-300 ease-in-out&#10;            ${productViewMode === &quot;grid&quot; ? &quot;bg-blue-600 text-white shadow-lg&quot; : &quot;bg-gray-200 text-gray-700 hover:bg-gray-300&quot;}&#10;          `}&#10;        &gt;&#10;          Product Grid View&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Dashboard Grid Layout */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Product View */}&#10;        &lt;div className=&quot;md:col-span-2 lg:col-span-3&quot;&gt;&#10;          {&quot; &quot;}&#10;          {/* Products take more space */}&#10;          {productViewMode === &quot;table&quot; ? (&#10;            &lt;ProductTable&#10;              products={products}&#10;              highlightedRow={isRowHighlighted} // Pass the helper function&#10;              itemsPerPage={10}&#10;            /&gt;&#10;          ) : (&#10;            &lt;ProductGrid&#10;              products={products}&#10;              highlightedRow={isRowHighlighted}&#10;            /&gt; // Pass the helper function&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Other Tables as Widgets */}&#10;        &lt;UserTable&#10;          users={users}&#10;          highlightedRow={isRowHighlighted} // Pass the helper function&#10;          itemsPerPage={10}&#10;        /&gt;&#10;        &lt;OrderTable&#10;          orders={orders}&#10;          highlightedRow={isRowHighlighted} // Pass the helper function&#10;          itemsPerPage={10}&#10;        /&gt;&#10;        &lt;TransactionTable&#10;          transactions={transactions}&#10;          highlightedRow={isRowHighlighted} // Pass the helper function&#10;          itemsPerPage={10}&#10;        /&gt;&#10;        &lt;SupportTicketTable&#10;          supportTickets={supportTickets}&#10;          highlightedRow={isRowHighlighted} // Pass the helper function&#10;          itemsPerPage={10}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useRef } from &quot;react&quot;;&#10;import axios from &quot;axios&quot;;&#10;import io from &quot;socket.io-client&quot;;&#10;import &quot;./App.css&quot;;&#10;import UserTable from &quot;./components/tables/UserTable&quot;;&#10;import ProductTable from &quot;./components/tables/ProductTable&quot;;&#10;import OrderTable from &quot;./components/tables/OrderTable&quot;;&#10;import TransactionTable from &quot;./components/tables/TransactionTable&quot;;&#10;import SupportTicketTable from &quot;./components/tables/SupportTicketTable&quot;;&#10;import ProductGrid from &quot;./components/ProductGrid&quot;;&#10;const API_BASE_URL = &quot;http://localhost:3001/api&quot;;&#10;const SOCKET_URL = &quot;http://localhost:3001&quot;;&#10;function App() {&#10;  const [users, setUsers] = useState([]);&#10;  const [products, setProducts] = useState([]);&#10;  const [orders, setOrders] = useState([]);&#10;  const [transactions, setTransactions] = useState([]);&#10;  const [supportTickets, setSupportTickets] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;  const [highlightedRows, setHighlightedRows] = useState([]);&#10;  const [productViewMode, setProductViewMode] = useState(&quot;table&quot;);&#10;  const prevUsersRef = useRef([]);&#10;  const prevProductsRef = useRef([]);&#10;  const prevOrdersRef = useRef([]);&#10;  const prevTransactionsRef = useRef([]);&#10;  const prevSupportTicketsRef = useRef([]);&#10;  useEffect(() =&gt; {&#10;    const fetchInitialData = async () =&gt; {&#10;      try {&#10;        const [&#10;          usersRes,&#10;          productsRes,&#10;          ordersRes,&#10;          transactionsRes,&#10;          supportTicketsRes,&#10;        ] = await Promise.all([&#10;          axios.get(`${API_BASE_URL}/users`),&#10;          axios.get(`${API_BASE_URL}/products`),&#10;          axios.get(`${API_BASE_URL}/orders`),&#10;          axios.get(`${API_BASE_URL}/transactions`),&#10;          axios.get(`${API_BASE_URL}/support-tickets`),&#10;        ]);&#10;        setUsers(usersRes.data);&#10;        setProducts(productsRes.data);&#10;        setOrders(ordersRes.data);&#10;        setTransactions(transactionsRes.data);&#10;        setSupportTickets(supportTicketsRes.data);&#10;        prevUsersRef.current = usersRes.data;&#10;        prevProductsRef.current = productsRes.data;&#10;        prevOrdersRef.current = ordersRes.data;&#10;        prevTransactionsRef.current = transactionsRes.data;&#10;        prevSupportTicketsRef.current = supportTicketsRes.data;&#10;        setLoading(false);&#10;      } catch (err) {&#10;        setError(&quot;Failed to load initial data.&quot;);&#10;        setLoading(false);&#10;      }&#10;    };&#10;    fetchInitialData();&#10;    const socket = io(SOCKET_URL);&#10;    socket.on(&quot;connect&quot;, () =&gt; {});&#10;    socket.on(&quot;dashboardUpdate&quot;, (data) =&gt; {&#10;      const findAndUpdateAndHighlight = (&#10;        newData,&#10;        currentDataRef,&#10;        setStateFn,&#10;        type,&#10;      ) =&gt; {&#10;        let updatedId = null;&#10;        let foundNewEntry = false;&#10;        const currentDataMap = new Map(&#10;          currentDataRef.current.map((item) =&gt; [item.id, item]),&#10;        );&#10;        let updatedDataSorted = [...newData];&#10;        for (const newItem of newData) {&#10;          const oldItem = currentDataMap.get(newItem.id);&#10;          if (!oldItem) {&#10;            updatedId = newItem.id;&#10;            foundNewEntry = true;&#10;            break;&#10;          }&#10;          if (JSON.stringify(newItem) !== JSON.stringify(oldItem)) {&#10;            updatedId = newItem.id;&#10;            break;&#10;          }&#10;        }&#10;        if (updatedId !== null) {&#10;          const itemToMove = updatedDataSorted.find(&#10;            (item) =&gt; item.id === updatedId,&#10;          );&#10;          if (itemToMove) {&#10;            updatedDataSorted = updatedDataSorted.filter(&#10;              (item) =&gt; item.id !== updatedId,&#10;            );&#10;            updatedDataSorted.unshift(itemToMove);&#10;          }&#10;        }&#10;        if (!updatedId &amp;&amp; newData.length &lt; currentDataRef.current.length) {&#10;          const newDataMap = new Map(newData.map((item) =&gt; [item.id, item]));&#10;          for (const oldItem of currentDataRef.current) {&#10;            if (!newDataMap.has(oldItem.id)) {&#10;              break;&#10;            }&#10;          }&#10;        }&#10;        setStateFn(updatedDataSorted);&#10;        currentDataRef.current = updatedDataSorted;&#10;        if (updatedId !== null) {&#10;          setHighlightedRows((prev) =&gt; [&#10;            ...prev,&#10;            { id: updatedId, type: type },&#10;          ]);&#10;          setTimeout(() =&gt; {&#10;            setHighlightedRows((prev) =&gt;&#10;              prev.filter(&#10;                (row) =&gt; !(row.id === updatedId &amp;&amp; row.type === type),&#10;              ),&#10;            );&#10;          }, 1000);&#10;        }&#10;      };&#10;      if (data.users)&#10;        findAndUpdateAndHighlight(data.users, prevUsersRef, setUsers, &quot;users&quot;);&#10;      if (data.products)&#10;        findAndUpdateAndHighlight(&#10;          data.products,&#10;          prevProductsRef,&#10;          setProducts,&#10;          &quot;products&quot;,&#10;        );&#10;      if (data.orders)&#10;        findAndUpdateAndHighlight(&#10;          data.orders,&#10;          prevOrdersRef,&#10;          setOrders,&#10;          &quot;orders&quot;,&#10;        );&#10;      if (data.transactions)&#10;        findAndUpdateAndHighlight(&#10;          data.transactions,&#10;          prevTransactionsRef,&#10;          setTransactions,&#10;          &quot;transactions&quot;,&#10;        );&#10;      if (data.supportTickets)&#10;        findAndUpdateAndHighlight(&#10;          data.supportTickets,&#10;          prevSupportTicketsRef,&#10;          setSupportTickets,&#10;          &quot;supportTickets&quot;,&#10;        );&#10;    });&#10;    socket.on(&quot;disconnect&quot;, () =&gt; {});&#10;    socket.on(&quot;connect_error&quot;, (err) =&gt; {&#10;      setError(&quot;Socket.IO connection failed.&quot;);&#10;    });&#10;    return () =&gt; {&#10;      socket.disconnect();&#10;    };&#10;  }, []);&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen text-lg&quot;&gt;&#10;        Loading dashboard data...&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen text-lg text-red-500&quot;&gt;&#10;        Error: {error}&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  const isRowHighlighted = (rowId, rowType) =&gt; {&#10;    return highlightedRows.some((hr) =&gt; hr.id === rowId &amp;&amp; hr.type === rowType);&#10;  };&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-100 p-4 font-sans&quot;&gt;&#10;      &lt;h1 className=&quot;text-4xl font-extrabold text-center mb-10 text-gray-900 drop-shadow-lg&quot;&gt;&#10;        Real-Time Dashboard &#10;      &lt;/h1&gt;&#10;      &lt;div className=&quot;flex justify-center mb-8&quot;&gt;&#10;        &lt;button&#10;          onClick={() =&gt; setProductViewMode(&quot;table&quot;)}&#10;          className={`&#10;            px-6 py-2 rounded-l-lg text-lg font-medium transition-all duration-300 ease-in-out&#10;            ${productViewMode === &quot;table&quot; ? &quot;bg-blue-600 text-white shadow-lg&quot; : &quot;bg-gray-200 text-gray-700 hover:bg-gray-300&quot;}&#10;          `}&#10;        &gt;&#10;          Product Table View&#10;        &lt;/button&gt;&#10;        &lt;button&#10;          onClick={() =&gt; setProductViewMode(&quot;grid&quot;)}&#10;          className={`&#10;            px-6 py-2 rounded-r-lg text-lg font-medium transition-all duration-300 ease-in-out&#10;            ${productViewMode === &quot;grid&quot; ? &quot;bg-blue-600 text-white shadow-lg&quot; : &quot;bg-gray-200 text-gray-700 hover:bg-gray-300&quot;}&#10;          `}&#10;        &gt;&#10;          Product Grid View&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;        &lt;div className=&quot;md:col-span-2 lg:col-span-3&quot;&gt;&#10;          {productViewMode === &quot;table&quot; ? (&#10;            &lt;ProductTable&#10;              products={products}&#10;              highlightedRow={isRowHighlighted}&#10;              itemsPerPage={10}&#10;            /&gt;&#10;          ) : (&#10;            &lt;ProductGrid&#10;              products={products}&#10;              highlightedRow={isRowHighlighted}&#10;            /&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        &lt;UserTable&#10;          users={users}&#10;          highlightedRow={isRowHighlighted}&#10;          itemsPerPage={10}&#10;        /&gt;&#10;        &lt;OrderTable&#10;          orders={orders}&#10;          highlightedRow={isRowHighlighted}&#10;          itemsPerPage={10}&#10;        /&gt;&#10;        &lt;TransactionTable&#10;          transactions={transactions}&#10;          highlightedRow={isRowHighlighted}&#10;          itemsPerPage={10}&#10;        /&gt;&#10;        &lt;SupportTicketTable&#10;          supportTickets={supportTickets}&#10;          highlightedRow={isRowHighlighted}&#10;          itemsPerPage={10}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/dashboard-frontend/src/components/common/Table.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/dashboard-frontend/src/components/common/Table.js" />
              <option name="originalContent" value="// src/components/common/Table.js&#10;import React, { useState, useEffect } from &quot;react&quot;;&#10;&#10;// A generic table component that takes columns, data, and pagination props.&#10;// It also accepts a highlightedRow prop (now a function) to apply a blinking effect.&#10;const Table = ({ columns, data, highlightedRow, itemsPerPage = 10 }) =&gt; {&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;&#10;  // Reset page to 1 if data changes significantly (e.g., filtered, or total count changes)&#10;  useEffect(() =&gt; {&#10;    const totalPages = Math.ceil(data.length / itemsPerPage);&#10;    if (currentPage &gt; totalPages &amp;&amp; totalPages &gt; 0) {&#10;      setCurrentPage(totalPages);&#10;    } else if (totalPages === 0) {&#10;      setCurrentPage(1);&#10;    }&#10;  }, [data, itemsPerPage, currentPage]);&#10;&#10;  const totalPages = Math.ceil(data.length / itemsPerPage);&#10;  const startIndex = (currentPage - 1) * itemsPerPage;&#10;  const endIndex = startIndex + itemsPerPage;&#10;  const currentData = data.slice(startIndex, endIndex);&#10;&#10;  const handlePageChange = (pageNumber) =&gt; {&#10;    if (pageNumber &gt; 0 &amp;&amp; pageNumber &lt;= totalPages) {&#10;      setCurrentPage(pageNumber);&#10;    }&#10;  };&#10;&#10;  const renderPaginationButtons = () =&gt; {&#10;    const pageNumbers = [];&#10;    const maxPagesToShow = 5;&#10;    let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));&#10;    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);&#10;&#10;    if (endPage - startPage + 1 &lt; maxPagesToShow) {&#10;      startPage = Math.max(1, endPage - maxPagesToShow + 1);&#10;    }&#10;&#10;    for (let i = startPage; i &lt;= endPage; i++) {&#10;      pageNumbers.push(i);&#10;    }&#10;&#10;    return (&#10;      &lt;nav className=&quot;flex justify-center items-center space-x-2 mt-4&quot;&gt;&#10;        &lt;button&#10;          onClick={() =&gt; handlePageChange(currentPage - 1)}&#10;          disabled={currentPage === 1}&#10;          className=&quot;px-3 py-1 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;        &gt;&#10;          Previous&#10;        &lt;/button&gt;&#10;        {pageNumbers.map((number) =&gt; (&#10;          &lt;button&#10;            key={number}&#10;            onClick={() =&gt; handlePageChange(number)}&#10;            className={`&#10;              px-3 py-1 rounded-md&#10;              ${currentPage === number ? &quot;bg-blue-600 text-white&quot; : &quot;bg-gray-200 text-gray-700 hover:bg-gray-300&quot;}&#10;            `}&#10;          &gt;&#10;            {number}&#10;          &lt;/button&gt;&#10;        ))}&#10;        &lt;button&#10;          onClick={() =&gt; handlePageChange(currentPage + 1)}&#10;          disabled={currentPage === totalPages || totalPages === 0}&#10;          className=&quot;px-3 py-1 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;        &gt;&#10;          Next&#10;        &lt;/button&gt;&#10;      &lt;/nav&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white shadow-md rounded-lg p-4&quot;&gt;&#10;      &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;        &lt;table className=&quot;min-w-full divide-y divide-gray-200&quot;&gt;&#10;          &lt;thead className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;tr&gt;&#10;              {columns.map((col, index) =&gt; (&#10;                &lt;th&#10;                  key={index}&#10;                  className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&#10;                &gt;&#10;                  {col.header}&#10;                &lt;/th&gt;&#10;              ))}&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;            {currentData.length &gt; 0 ? (&#10;              currentData.map((row) =&gt; (&#10;                &lt;tr&#10;                  key={row.id}&#10;                  // Call the highlightedRow function to check if this row should be highlighted&#10;                  className={`${highlightedRow(row.id, row.type) ? &quot;highlight-row&quot; : &quot;&quot;}`}&#10;                &gt;&#10;                  {columns.map((col, index) =&gt; (&#10;                    &lt;td&#10;                      key={index}&#10;                      className={`px-6 py-4 whitespace-nowrap text-sm ${&#10;                        col.isId ? &quot;font-medium text-gray-900&quot; : &quot;text-gray-500&quot;&#10;                      } ${col.truncate ? &quot;max-w-xs truncate&quot; : &quot;&quot;}`}&#10;                    &gt;&#10;                      {col.accessor(row)}&#10;                    &lt;/td&gt;&#10;                  ))}&#10;                &lt;/tr&gt;&#10;              ))&#10;            ) : (&#10;              &lt;tr&gt;&#10;                &lt;td&#10;                  colSpan={columns.length}&#10;                  className=&quot;px-6 py-4 text-center text-sm text-gray-500&quot;&#10;                &gt;&#10;                  No data available.&#10;                &lt;/td&gt;&#10;              &lt;/tr&gt;&#10;            )}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;      {totalPages &gt; 1 &amp;&amp; renderPaginationButtons()}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Table;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;const Table = ({ columns, data, highlightedRow, itemsPerPage = 10 }) =&gt; {&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  useEffect(() =&gt; {&#10;    const totalPages = Math.ceil(data.length / itemsPerPage);&#10;    if (currentPage &gt; totalPages &amp;&amp; totalPages &gt; 0) {&#10;      setCurrentPage(totalPages);&#10;    } else if (totalPages === 0) {&#10;      setCurrentPage(1);&#10;    }&#10;  }, [data, itemsPerPage, currentPage]);&#10;  const totalPages = Math.ceil(data.length / itemsPerPage);&#10;  const startIndex = (currentPage - 1) * itemsPerPage;&#10;  const endIndex = startIndex + itemsPerPage;&#10;  const currentData = data.slice(startIndex, endIndex);&#10;  const handlePageChange = (pageNumber) =&gt; {&#10;    if (pageNumber &gt; 0 &amp;&amp; pageNumber &lt;= totalPages) {&#10;      setCurrentPage(pageNumber);&#10;    }&#10;  };&#10;  const renderPaginationButtons = () =&gt; {&#10;    const pageNumbers = [];&#10;    const maxPagesToShow = 5;&#10;    let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));&#10;    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);&#10;    if (endPage - startPage + 1 &lt; maxPagesToShow) {&#10;      startPage = Math.max(1, endPage - maxPagesToShow + 1);&#10;    }&#10;    for (let i = startPage; i &lt;= endPage; i++) {&#10;      pageNumbers.push(i);&#10;    }&#10;    return (&#10;      &lt;nav className=&quot;flex justify-center items-center space-x-2 mt-4&quot;&gt;&#10;        &lt;button&#10;          onClick={() =&gt; handlePageChange(currentPage - 1)}&#10;          disabled={currentPage === 1}&#10;          className=&quot;px-3 py-1 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;        &gt;&#10;          Previous&#10;        &lt;/button&gt;&#10;        {pageNumbers.map((number) =&gt; (&#10;          &lt;button&#10;            key={number}&#10;            onClick={() =&gt; handlePageChange(number)}&#10;            className={`&#10;              px-3 py-1 rounded-md&#10;              ${currentPage === number ? &quot;bg-blue-600 text-white&quot; : &quot;bg-gray-200 text-gray-700 hover:bg-gray-300&quot;}&#10;            `}&#10;          &gt;&#10;            {number}&#10;          &lt;/button&gt;&#10;        ))}&#10;        &lt;button&#10;          onClick={() =&gt; handlePageChange(currentPage + 1)}&#10;          disabled={currentPage === totalPages || totalPages === 0}&#10;          className=&quot;px-3 py-1 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;        &gt;&#10;          Next&#10;        &lt;/button&gt;&#10;      &lt;/nav&gt;&#10;    );&#10;  };&#10;  return (&#10;    &lt;div className=&quot;bg-white shadow-md rounded-lg p-4&quot;&gt;&#10;      &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;        &lt;table className=&quot;min-w-full divide-y divide-gray-200&quot;&gt;&#10;          &lt;thead className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;tr&gt;&#10;              {columns.map((col, index) =&gt; (&#10;                &lt;th&#10;                  key={index}&#10;                  className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&#10;                &gt;&#10;                  {col.header}&#10;                &lt;/th&gt;&#10;              ))}&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;            {currentData.length &gt; 0 ? (&#10;              currentData.map((row) =&gt; (&#10;                &lt;tr&#10;                  key={row.id}&#10;                  className={`${highlightedRow(row.id, row.type) ? &quot;highlight-row&quot; : &quot;&quot;}`}&#10;                &gt;&#10;                  {columns.map((col, index) =&gt; (&#10;                    &lt;td&#10;                      key={index}&#10;                      className={`px-6 py-4 whitespace-nowrap text-sm ${&#10;                        col.isId ? &quot;font-medium text-gray-900&quot; : &quot;text-gray-500&quot;&#10;                      } ${col.truncate ? &quot;max-w-xs truncate&quot; : &quot;&quot;}`}&#10;                    &gt;&#10;                      {col.accessor(row)}&#10;                    &lt;/td&gt;&#10;                  ))}&#10;                &lt;/tr&gt;&#10;              ))&#10;            ) : (&#10;              &lt;tr&gt;&#10;                &lt;td&#10;                  colSpan={columns.length}&#10;                  className=&quot;px-6 py-4 text-center text-sm text-gray-500&quot;&#10;                &gt;&#10;                  No data available.&#10;                &lt;/td&gt;&#10;              &lt;/tr&gt;&#10;            )}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;      {totalPages &gt; 1 &amp;&amp; renderPaginationButtons()}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;export default Table;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/dashboard-frontend/src/components/tables/OrderTable.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/dashboard-frontend/src/components/tables/OrderTable.js" />
              <option name="originalContent" value="// src/components/tables/OrderTable.js&#10;import React from &quot;react&quot;;&#10;import Table from &quot;../common/Table&quot;;&#10;&#10;const OrderTable = ({ orders, highlightedRow, itemsPerPage }) =&gt; {&#10;  // Added itemsPerPage&#10;  const columns = [&#10;    { header: &quot;ID&quot;, accessor: (row) =&gt; row.id, isId: true },&#10;    {&#10;      header: &quot;User&quot;,&#10;      accessor: (row) =&gt; (row.user ? row.user.username : &quot;N/A&quot;),&#10;    },&#10;    {&#10;      header: &quot;Order Date&quot;,&#10;      accessor: (row) =&gt; new Date(row.order_date).toLocaleDateString(),&#10;    },&#10;    {&#10;      header: &quot;Total Amount&quot;,&#10;      accessor: (row) =&gt; `$${parseFloat(row.total_amount).toFixed(2)}`,&#10;    },&#10;    { header: &quot;Status&quot;, accessor: (row) =&gt; row.status },&#10;  ];&#10;&#10;  const ordersWithType = orders.map((order) =&gt; ({ ...order, type: &quot;orders&quot; }));&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      {&quot; &quot;}&#10;      {/* Removed widget styling */}&#10;      &lt;h2 className=&quot;text-2xl font-semibold mb-4 text-gray-700&quot;&gt;&#10;        Orders ({orders.length})&#10;      &lt;/h2&gt;&#10;      &lt;Table&#10;        columns={columns}&#10;        data={ordersWithType}&#10;        highlightedRow={highlightedRow}&#10;        itemsPerPage={itemsPerPage}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default OrderTable;&#10;" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import Table from &quot;../common/Table&quot;;&#10;&#10;const OrderTable = ({ orders, highlightedRow, itemsPerPage }) =&gt; {&#10;  const columns = [&#10;    { header: &quot;ID&quot;, accessor: (row) =&gt; row.id, isId: true },&#10;    {&#10;      header: &quot;User&quot;,&#10;      accessor: (row) =&gt; (row.user ? row.user.username : &quot;N/A&quot;),&#10;    },&#10;    {&#10;      header: &quot;Order Date&quot;,&#10;      accessor: (row) =&gt; new Date(row.order_date).toLocaleDateString(),&#10;    },&#10;    {&#10;      header: &quot;Total Amount&quot;,&#10;      accessor: (row) =&gt; `$${parseFloat(row.total_amount).toFixed(2)}`,&#10;    },&#10;    { header: &quot;Status&quot;, accessor: (row) =&gt; row.status },&#10;  ];&#10;  const ordersWithType = orders.map((order) =&gt; ({ ...order, type: &quot;orders&quot; }));&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h2 className=&quot;text-2xl font-semibold mb-4 text-gray-700&quot;&gt;&#10;        Orders ({orders.length})&#10;      &lt;/h2&gt;&#10;      &lt;Table&#10;        columns={columns}&#10;        data={ordersWithType}&#10;        highlightedRow={highlightedRow}&#10;        itemsPerPage={itemsPerPage}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default OrderTable;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/dashboard-frontend/src/components/tables/ProductTable.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/dashboard-frontend/src/components/tables/ProductTable.js" />
              <option name="originalContent" value="// src/components/tables/ProductTable.js&#10;import React from &quot;react&quot;;&#10;import Table from &quot;../common/Table&quot;;&#10;&#10;const ProductTable = ({ products, highlightedRow, itemsPerPage }) =&gt; {&#10;  // Added itemsPerPage&#10;  const columns = [&#10;    { header: &quot;ID&quot;, accessor: (row) =&gt; row.id, isId: true },&#10;    { header: &quot;Name&quot;, accessor: (row) =&gt; row.name },&#10;    {&#10;      header: &quot;Description&quot;,&#10;      accessor: (row) =&gt; row.description,&#10;      truncate: true,&#10;    },&#10;    {&#10;      header: &quot;Price&quot;,&#10;      accessor: (row) =&gt; `$${parseFloat(row.price).toFixed(2)}`,&#10;    },&#10;    { header: &quot;Stock&quot;, accessor: (row) =&gt; row.stock_quantity },&#10;  ];&#10;&#10;  const productsWithType = products.map((product) =&gt; ({&#10;    ...product,&#10;    type: &quot;products&quot;,&#10;  }));&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      {&quot; &quot;}&#10;      {/* Removed widget styling */}&#10;      &lt;h2 className=&quot;text-2xl font-semibold mb-4 text-gray-700&quot;&gt;&#10;        Products ({products.length})&#10;      &lt;/h2&gt;&#10;      &lt;Table&#10;        columns={columns}&#10;        data={productsWithType}&#10;        highlightedRow={highlightedRow}&#10;        itemsPerPage={itemsPerPage}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default ProductTable;&#10;" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import Table from &quot;../common/Table&quot;;&#10;&#10;const ProductTable = ({ products, highlightedRow, itemsPerPage }) =&gt; {&#10;  const columns = [&#10;    { header: &quot;ID&quot;, accessor: (row) =&gt; row.id, isId: true },&#10;    { header: &quot;Name&quot;, accessor: (row) =&gt; row.name },&#10;    {&#10;      header: &quot;Description&quot;,&#10;      accessor: (row) =&gt; row.description,&#10;      truncate: true,&#10;    },&#10;    {&#10;      header: &quot;Price&quot;,&#10;      accessor: (row) =&gt; `$${parseFloat(row.price).toFixed(2)}`,&#10;    },&#10;    { header: &quot;Stock&quot;, accessor: (row) =&gt; row.stock_quantity },&#10;  ];&#10;&#10;  const productsWithType = products.map((product) =&gt; ({&#10;    ...product,&#10;    type: &quot;products&quot;,&#10;  }));&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h2 className=&quot;text-2xl font-semibold mb-4 text-gray-700&quot;&gt;&#10;        Products ({products.length})&#10;      &lt;/h2&gt;&#10;      &lt;Table&#10;        columns={columns}&#10;        data={productsWithType}&#10;        highlightedRow={highlightedRow}&#10;        itemsPerPage={itemsPerPage}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default ProductTable;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/models/index.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/models/index.js" />
              <option name="originalContent" value="const sequelize = require('../db'); // Import the Sequelize instance&#10;&#10;const db = {};&#10;&#10;&#10;db.User = require('./User')(sequelize);&#10;db.Product = require('./Product')(sequelize);&#10;db.Order = require('./Order')(sequelize);&#10;db.Transaction = require('./Transaction')(sequelize);&#10;db.SupportTicket = require('./SupportTicket')(sequelize);&#10;&#10;Object.keys(db).forEach(modelName =&gt; {&#10;    if (db[modelName].associate) {&#10;        db[modelName].associate(db);&#10;    }&#10;});&#10;&#10;&#10;db.User.hasMany(db.Order, { foreignKey: 'user_id', as: 'orders' });&#10;db.Order.belongsTo(db.User, { foreignKey: 'user_id', as: 'user' }); // An order belongs to one user&#10;&#10;// Order has many Transactions (an order can have multiple payment transactions)&#10;db.Order.hasMany(db.Transaction, { foreignKey: 'order_id', as: 'transactions' });&#10;db.Transaction.belongsTo(db.Order, { foreignKey: 'order_id', as: 'order' }); // A transaction belongs to one order&#10;&#10;// User has many SupportTickets (a user can open multiple support tickets)&#10;db.User.hasMany(db.SupportTicket, { foreignKey: 'user_id', as: 'supportTickets' });&#10;db.SupportTicket.belongsTo(db.User, { foreignKey: 'user_id', as: 'user' }); // A support ticket belongs to one user&#10;&#10;&#10;db.sequelize = sequelize;&#10;&#10;&#10;module.exports = db;&#10;" />
              <option name="updatedContent" value="const sequelize = require('../db');&#10;const db = {};&#10;db.User = require('./User')(sequelize);&#10;db.Product = require('./Product')(sequelize);&#10;db.Order = require('./Order')(sequelize);&#10;db.Transaction = require('./Transaction')(sequelize);&#10;db.SupportTicket = require('./SupportTicket')(sequelize);&#10;Object.keys(db).forEach(modelName =&gt; {&#10;    if (db[modelName].associate) {&#10;        db[modelName].associate(db);&#10;    }&#10;});&#10;db.User.hasMany(db.Order, { foreignKey: 'user_id', as: 'orders' });&#10;db.Order.belongsTo(db.User, { foreignKey: 'user_id', as: 'user' });&#10;db.Order.hasMany(db.Transaction, { foreignKey: 'order_id', as: 'transactions' });&#10;db.Transaction.belongsTo(db.Order, { foreignKey: 'order_id', as: 'order' });&#10;db.User.hasMany(db.SupportTicket, { foreignKey: 'user_id', as: 'supportTickets' });&#10;db.SupportTicket.belongsTo(db.User, { foreignKey: 'user_id', as: 'user' });&#10;db.sequelize = sequelize;&#10;module.exports = db;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/server.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/server.js" />
              <option name="originalContent" value="// server.js&#10;const express = require(&quot;express&quot;);&#10;const http = require(&quot;http&quot;);&#10;const { Server } = require(&quot;socket.io&quot;);&#10;const cors = require(&quot;cors&quot;);&#10;&#10;const db = require(&quot;./models&quot;);&#10;&#10;const app = express();&#10;const port = process.env.PORT || 3001;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// --- REST API Endpoints for Initial Data Loading ---&#10;app.get(&quot;/api/users&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const users = await db.User.findAll();&#10;    res.json(users);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching users:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({ message: &quot;Error fetching users&quot;, error: error.message });&#10;  }&#10;});&#10;&#10;app.get(&quot;/api/products&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const products = await db.Product.findAll();&#10;    res.json(products);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({ message: &quot;Error fetching products&quot;, error: error.message });&#10;  }&#10;});&#10;&#10;app.get(&quot;/api/orders&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const orders = await db.Order.findAll({&#10;      include: [&#10;        { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;      ],&#10;    });&#10;    res.json(orders);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching orders:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({ message: &quot;Error fetching orders&quot;, error: error.message });&#10;  }&#10;});&#10;&#10;app.get(&quot;/api/transactions&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const transactions = await db.Transaction.findAll({&#10;      include: [&#10;        {&#10;          model: db.Order,&#10;          as: &quot;order&quot;,&#10;          attributes: [&quot;total_amount&quot;, &quot;status&quot;],&#10;        },&#10;      ],&#10;    });&#10;    res.json(transactions);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching transactions:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({ message: &quot;Error fetching transactions&quot;, error: error.message });&#10;  }&#10;});&#10;&#10;app.get(&quot;/api/support-tickets&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const supportTickets = await db.SupportTicket.findAll({&#10;      include: [&#10;        { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;      ],&#10;    });&#10;    res.json(supportTickets);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching support tickets:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({&#10;        message: &quot;Error fetching support tickets&quot;,&#10;        error: error.message,&#10;      });&#10;  }&#10;});&#10;&#10;// --- Socket.IO Server Setup ---&#10;const server = http.createServer(app);&#10;const io = new Server(server, {&#10;  cors: {&#10;    origin: &quot;*&quot;,&#10;    methods: [&quot;GET&quot;, &quot;POST&quot;],&#10;  },&#10;});&#10;&#10;io.on(&quot;connection&quot;, (socket) =&gt; {&#10;  console.log(&quot;A client connected via Socket.IO:&quot;, socket.id);&#10;  socket.on(&quot;disconnect&quot;, () =&gt; {&#10;    console.log(&quot;Client disconnected:&quot;, socket.id);&#10;  });&#10;  socket.on(&quot;error&quot;, (error) =&gt; {&#10;    console.error(&quot;Socket.IO error:&quot;, error);&#10;  });&#10;});&#10;&#10;// Function to simulate data updates and broadcast via Socket.IO&#10;const broadcastDataUpdates = async () =&gt; {&#10;  try {&#10;    // Fetch current data for all models&#10;    let users = await db.User.findAll();&#10;    let products = await db.Product.findAll();&#10;    let orders = await db.Order.findAll({&#10;      include: [&#10;        { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;      ],&#10;    });&#10;    let transactions = await db.Transaction.findAll({&#10;      include: [&#10;        {&#10;          model: db.Order,&#10;          as: &quot;order&quot;,&#10;          attributes: [&quot;total_amount&quot;, &quot;status&quot;],&#10;        },&#10;      ],&#10;    });&#10;    let supportTickets = await db.SupportTicket.findAll({&#10;      include: [&#10;        { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;      ],&#10;    });&#10;&#10;    // --- Simulate Actual Random Updates ---&#10;&#10;    // 1. Update a random Product's stock and/or price&#10;    if (products.length &gt; 0) {&#10;      const productToUpdate =&#10;        products[Math.floor(Math.random() * products.length)];&#10;      const newStock = Math.max(&#10;        1,&#10;        productToUpdate.stock_quantity + Math.floor(Math.random() * 21) - 10,&#10;      ); // +/- 10 stock&#10;      const newPrice = (&#10;        parseFloat(productToUpdate.price) +&#10;        (Math.random() * 10 - 5)&#10;      ).toFixed(2); // +/- 5 price&#10;      await db.Product.update(&#10;        { stock_quantity: newStock, price: newPrice },&#10;        { where: { id: productToUpdate.id } },&#10;      );&#10;      // Re-fetch the updated product to send consistent data&#10;      const updatedProduct = await db.Product.findByPk(productToUpdate.id);&#10;      products = products.map((p) =&gt;&#10;        p.id === updatedProduct.id ? updatedProduct : p,&#10;      );&#10;    }&#10;&#10;    // 2. Update a random Order's status&#10;    if (orders.length &gt; 0) {&#10;      const orderToUpdate = orders[Math.floor(Math.random() * orders.length)];&#10;      const statuses = [&quot;Pending&quot;, &quot;Completed&quot;, &quot;Shipped&quot;, &quot;Cancelled&quot;];&#10;      const newStatus = statuses[Math.floor(Math.random() * statuses.length)];&#10;      await db.Order.update(&#10;        { status: newStatus },&#10;        { where: { id: orderToUpdate.id } },&#10;      );&#10;      // Re-fetch the updated order (with user include)&#10;      const updatedOrder = await db.Order.findByPk(orderToUpdate.id, {&#10;        include: [&#10;          { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;        ],&#10;      });&#10;      orders = orders.map((o) =&gt; (o.id === updatedOrder.id ? updatedOrder : o));&#10;    }&#10;&#10;    // 3. Update a random Support Ticket's status&#10;    if (supportTickets.length &gt; 0) {&#10;      const ticketToUpdate =&#10;        supportTickets[Math.floor(Math.random() * supportTickets.length)];&#10;      const statuses = [&quot;Open&quot;, &quot;Closed&quot;, &quot;In Progress&quot;, &quot;Resolved&quot;];&#10;      const newStatus = statuses[Math.floor(Math.random() * statuses.length)];&#10;      await db.SupportTicket.update(&#10;        { status: newStatus },&#10;        { where: { id: ticketToUpdate.id } },&#10;      );&#10;      // Re-fetch the updated ticket (with user include)&#10;      const updatedTicket = await db.SupportTicket.findByPk(ticketToUpdate.id, {&#10;        include: [&#10;          { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;        ],&#10;      });&#10;      supportTickets = supportTickets.map((t) =&gt;&#10;        t.id === updatedTicket.id ? updatedTicket : t,&#10;      );&#10;    }&#10;&#10;    // 4. Optionally, add a new user occasionally (less frequent)&#10;    if (Math.random() &lt; 0.05) {&#10;      // 5% chance to add a new user&#10;      const { faker } = require(&quot;@faker-js/faker&quot;); // Import faker here for server-side use&#10;      const newUser = await db.User.create({&#10;        username: faker.internet.userName(),&#10;        email: faker.internet.email(),&#10;        registration_date: faker.date&#10;          .recent({ days: 7 })&#10;          .toISOString()&#10;          .split(&quot;T&quot;)[0],&#10;      });&#10;      users.push(newUser); // Add to the array to be sent&#10;      console.log(&quot;Added new user:&quot;, newUser.username);&#10;    }&#10;&#10;    const dataUpdates = {&#10;      users: users,&#10;      products: products,&#10;      orders: orders,&#10;      transactions: transactions,&#10;      supportTickets: supportTickets,&#10;    };&#10;&#10;    io.emit(&quot;dashboardUpdate&quot;, dataUpdates);&#10;    // console.log('Broadcasted data updates via Socket.IO.'); // Keep this commented to reduce console spam&#10;  } catch (error) {&#10;    console.error(&quot;Error broadcasting data updates:&quot;, error);&#10;  }&#10;};&#10;&#10;setInterval(broadcastDataUpdates, 3000);&#10;&#10;// --- Database Synchronization and Server Start ---&#10;db.sequelize&#10;  .sync({ force: false })&#10;  .then(() =&gt; {&#10;    console.log(&quot;Database synchronized.&quot;);&#10;    server.listen(port, () =&gt; {&#10;      console.log(`Server running on port ${port}`);&#10;      console.log(`HTTP: http://localhost:${port}`);&#10;      console.log(`Socket.IO: ws://localhost:${port}`);&#10;    });&#10;  })&#10;  .catch((err) =&gt; {&#10;    console.error(&quot;Unable to connect to the database or sync models:&quot;, err);&#10;    process.exit(1);&#10;  });&#10;" />
              <option name="updatedContent" value="const express = require(&quot;express&quot;);&#10;const http = require(&quot;http&quot;);&#10;const { Server } = require(&quot;socket.io&quot;);&#10;const cors = require(&quot;cors&quot;);&#10;&#10;const db = require(&quot;./models&quot;);&#10;&#10;const app = express();&#10;const port = process.env.PORT || 3001;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;app.get(&quot;/api/users&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const users = await db.User.findAll();&#10;    res.json(users);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching users:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({ message: &quot;Error fetching users&quot;, error: error.message });&#10;  }&#10;});&#10;&#10;app.get(&quot;/api/products&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const products = await db.Product.findAll();&#10;    res.json(products);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching products:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({ message: &quot;Error fetching products&quot;, error: error.message });&#10;  }&#10;});&#10;&#10;app.get(&quot;/api/orders&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const orders = await db.Order.findAll({&#10;      include: [&#10;        { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;      ],&#10;    });&#10;    res.json(orders);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching orders:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({ message: &quot;Error fetching orders&quot;, error: error.message });&#10;  }&#10;});&#10;&#10;app.get(&quot;/api/transactions&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const transactions = await db.Transaction.findAll({&#10;      include: [&#10;        {&#10;          model: db.Order,&#10;          as: &quot;order&quot;,&#10;          attributes: [&quot;total_amount&quot;, &quot;status&quot;],&#10;        },&#10;      ],&#10;    });&#10;    res.json(transactions);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching transactions:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({ message: &quot;Error fetching transactions&quot;, error: error.message });&#10;  }&#10;});&#10;&#10;app.get(&quot;/api/support-tickets&quot;, async (req, res) =&gt; {&#10;  try {&#10;    const supportTickets = await db.SupportTicket.findAll({&#10;      include: [&#10;        { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;      ],&#10;    });&#10;    res.json(supportTickets);&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching support tickets:&quot;, error);&#10;    res&#10;      .status(500)&#10;      .json({&#10;        message: &quot;Error fetching support tickets&quot;,&#10;        error: error.message,&#10;      });&#10;  }&#10;});&#10;&#10;const server = http.createServer(app);&#10;const io = new Server(server, {&#10;  cors: {&#10;    origin: &quot;*&quot;,&#10;    methods: [&quot;GET&quot;, &quot;POST&quot;],&#10;  },&#10;});&#10;&#10;io.on(&quot;connection&quot;, (socket) =&gt; {&#10;  console.log(&quot;A client connected via Socket.IO:&quot;, socket.id);&#10;  socket.on(&quot;disconnect&quot;, () =&gt; {&#10;    console.log(&quot;Client disconnected:&quot;, socket.id);&#10;  });&#10;  socket.on(&quot;error&quot;, (error) =&gt; {&#10;    console.error(&quot;Socket.IO error:&quot;, error);&#10;  });&#10;});&#10;&#10;const broadcastDataUpdates = async () =&gt; {&#10;  try {&#10;    let users = await db.User.findAll();&#10;    let products = await db.Product.findAll();&#10;    let orders = await db.Order.findAll({&#10;      include: [&#10;        { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;      ],&#10;    });&#10;    let transactions = await db.Transaction.findAll({&#10;      include: [&#10;        {&#10;          model: db.Order,&#10;          as: &quot;order&quot;,&#10;          attributes: [&quot;total_amount&quot;, &quot;status&quot;],&#10;        },&#10;      ],&#10;    });&#10;    let supportTickets = await db.SupportTicket.findAll({&#10;      include: [&#10;        { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;      ],&#10;    });&#10;&#10;    if (products.length &gt; 0) {&#10;      const productToUpdate =&#10;        products[Math.floor(Math.random() * products.length)];&#10;      const newStock = Math.max(&#10;        1,&#10;        productToUpdate.stock_quantity + Math.floor(Math.random() * 21) - 10,&#10;      );&#10;      const newPrice = (&#10;        parseFloat(productToUpdate.price) +&#10;        (Math.random() * 10 - 5)&#10;      ).toFixed(2);&#10;      await db.Product.update(&#10;        { stock_quantity: newStock, price: newPrice },&#10;        { where: { id: productToUpdate.id } },&#10;      );&#10;      const updatedProduct = await db.Product.findByPk(productToUpdate.id);&#10;      products = products.map((p) =&gt;&#10;        p.id === updatedProduct.id ? updatedProduct : p,&#10;      );&#10;    }&#10;&#10;    if (orders.length &gt; 0) {&#10;      const orderToUpdate = orders[Math.floor(Math.random() * orders.length)];&#10;      const statuses = [&quot;Pending&quot;, &quot;Completed&quot;, &quot;Shipped&quot;, &quot;Cancelled&quot;];&#10;      const newStatus = statuses[Math.floor(Math.random() * statuses.length)];&#10;      await db.Order.update(&#10;        { status: newStatus },&#10;        { where: { id: orderToUpdate.id } },&#10;      );&#10;      const updatedOrder = await db.Order.findByPk(orderToUpdate.id, {&#10;        include: [&#10;          { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;        ],&#10;      });&#10;      orders = orders.map((o) =&gt; (o.id === updatedOrder.id ? updatedOrder : o));&#10;    }&#10;&#10;    if (supportTickets.length &gt; 0) {&#10;      const ticketToUpdate =&#10;        supportTickets[Math.floor(Math.random() * supportTickets.length)];&#10;      const statuses = [&quot;Open&quot;, &quot;Closed&quot;, &quot;In Progress&quot;, &quot;Resolved&quot;];&#10;      const newStatus = statuses[Math.floor(Math.random() * statuses.length)];&#10;      await db.SupportTicket.update(&#10;        { status: newStatus },&#10;        { where: { id: ticketToUpdate.id } },&#10;      );&#10;      const updatedTicket = await db.SupportTicket.findByPk(ticketToUpdate.id, {&#10;        include: [&#10;          { model: db.User, as: &quot;user&quot;, attributes: [&quot;username&quot;, &quot;email&quot;] },&#10;        ],&#10;      });&#10;      supportTickets = supportTickets.map((t) =&gt;&#10;        t.id === updatedTicket.id ? updatedTicket : t,&#10;      );&#10;    }&#10;    if (Math.random() &lt; 0.05) {&#10;      const { faker } = require(&quot;@faker-js/faker&quot;);&#10;      const newUser = await db.User.create({&#10;        username: faker.internet.userName(),&#10;        email: faker.internet.email(),&#10;        registration_date: faker.date&#10;          .recent({ days: 7 })&#10;          .toISOString()&#10;          .split(&quot;T&quot;)[0],&#10;      });&#10;      users.push(newUser);&#10;      console.log(&quot;Added new user:&quot;, newUser.username);&#10;    }&#10;    const dataUpdates = {&#10;      users: users,&#10;      products: products,&#10;      orders: orders,&#10;      transactions: transactions,&#10;      supportTickets: supportTickets,&#10;    };&#10;    io.emit(&quot;dashboardUpdate&quot;, dataUpdates);&#10;  } catch (error) {&#10;    console.error(&quot;Error broadcasting data updates:&quot;, error);&#10;  }&#10;};&#10;&#10;setInterval(broadcastDataUpdates, 3000);&#10;&#10;db.sequelize&#10;  .sync({ force: false })&#10;  .then(() =&gt; {&#10;    console.log(&quot;Database synchronized.&quot;);&#10;    server.listen(port, () =&gt; {&#10;      console.log(`Server running on port ${port}`);&#10;      console.log(`HTTP: http://localhost:${port}`);&#10;      console.log(`Socket.IO: ws://localhost:${port}`);&#10;    });&#10;  })&#10;  .catch((err) =&gt; {&#10;    console.error(&quot;Unable to connect to the database or sync models:&quot;, err);&#10;    process.exit(1);&#10;  });" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>